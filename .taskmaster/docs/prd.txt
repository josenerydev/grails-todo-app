# PRD - Sistema de Gerenciamento de TODOs com Grails

## Visão Geral
Desenvolver um sistema completo de gerenciamento de tarefas (TODOs) usando Grails 2.5.6, incluindo backend API REST e frontend server-side rendering com GSP (Groovy Server Pages).

## Objetivos
- Implementar CRUD completo para gerenciamento de tarefas
- Criar interface web responsiva usando GSP e Bootstrap
- Implementar API REST para integração futura
- Manter compatibilidade com Grails 2.5.6 existente

## Funcionalidades Principais

### Backend (API REST)
1. **CRUD de Tarefas**
   - Criar nova tarefa
   - Listar todas as tarefas
   - Buscar tarefa por ID
   - Atualizar tarefa existente
   - Deletar tarefa
   - Marcar tarefa como concluída/pendente

2. **Campos da Tarefa**
   - ID (auto-gerado)
   - Título (obrigatório)
   - Descrição (opcional)
   - Status (pendente/concluída)
   - Data de criação
   - Data de atualização
   - Prioridade (baixa/média/alta)

### Frontend (Server-Side Rendering)
1. **Páginas GSP**
   - Lista de tarefas com filtros
   - Formulário de criação/edição
   - Visualização detalhada da tarefa
   - Dashboard com estatísticas

2. **Funcionalidades de Interface**
   - Busca e filtros (por status, prioridade)
   - Ordenação (data, prioridade, título)
   - Paginação
   - Ações em lote (marcar múltiplas como concluídas)
   - Design responsivo

## Especificações Técnicas

### Tecnologias
- **Backend**: Grails 2.5.6, Groovy, Hibernate
- **Frontend**: GSP, Bootstrap 3, jQuery
- **Banco de Dados**: H2 (desenvolvimento), PostgreSQL (produção)
- **Formato de Dados**: JSON para API, HTML para frontend

### Estrutura de Dados
```groovy
class Task {
    String title
    String description
    TaskStatus status = TaskStatus.PENDING
    TaskPriority priority = TaskPriority.MEDIUM
    Date dateCreated
    Date lastUpdated
    
    static constraints = {
        title blank: false, maxSize: 255
        description nullable: true, maxSize: 1000
        status nullable: false
        priority nullable: false
    }
}

enum TaskStatus {
    PENDING, COMPLETED
}

enum TaskPriority {
    LOW, MEDIUM, HIGH
}
```

### Endpoints da API
- `GET /api/tasks` - Listar todas as tarefas
- `GET /api/tasks/:id` - Buscar tarefa por ID
- `POST /api/tasks` - Criar nova tarefa
- `PUT /api/tasks/:id` - Atualizar tarefa
- `DELETE /api/tasks/:id` - Deletar tarefa
- `PATCH /api/tasks/:id/status` - Alterar status da tarefa

### Páginas do Frontend
- `/` - Dashboard principal
- `/tasks` - Lista de tarefas
- `/tasks/create` - Criar nova tarefa
- `/tasks/:id` - Visualizar tarefa
- `/tasks/:id/edit` - Editar tarefa

## Requisitos de Qualidade
- Código bem documentado
- Testes unitários para services e controllers
- Testes de integração para API
- Validação de dados robusta
- Tratamento de erros adequado
- Interface responsiva e acessível

## Considerações de Arquitetura
- Usar padrão MVC do Grails
- Implementar services para lógica de negócio
- Separar controllers para API e frontend
- Usar interceptors para validação e logging
- Implementar cache para consultas frequentes
- Configurar CORS para API

## Entregáveis
1. Domain classes com validações
2. Controllers REST e web
3. Services de negócio
4. Views GSP responsivas
5. Testes unitários e de integração
6. Configuração de banco de dados
7. Documentação da API
8. README com instruções de instalação
