{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Configurar Spock Framework e Ambiente de Testes",
        "description": "Adicionar as dependências necessárias do Spock Framework (1.3-groovy-2.4) e JUnit (4.12) ao BuildConfig.groovy. Configurar o ambiente de testes para usar um banco de dados H2 em memória e ajustar as configurações de logging para testes. Verificar a execução básica de um teste Spock.",
        "details": "Modificar `grails-app/conf/BuildConfig.groovy` para incluir `test 'org.spockframework:spock-core:1.3-groovy-2.4'` e `test 'junit:junit:4.12'`. Criar ou ajustar `grails-app/conf/DataSource.groovy` para configurar o H2 em memória para o ambiente de `test`. Criar um teste Spock simples em `test/unit` para validar a configuração.",
        "testStrategy": "Criar um teste Spock básico (ex: `SampleSpec.groovy`) para verificar se o framework está corretamente configurado e os testes podem ser executados via `grails test-app unit: *`.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Adicionar dependência do Spock Framework ao BuildConfig.groovy",
            "description": "Incluir a dependência `test 'org.spockframework:spock-core:1.3-groovy-2.4'` no bloco `dependencies` do arquivo `grails-app/conf/BuildConfig.groovy` para habilitar o uso do Spock Framework em testes.",
            "dependencies": [],
            "details": "Modificar `grails-app/conf/BuildConfig.groovy` para adicionar a linha `test 'org.spockframework:spock-core:1.3-groovy-2.4'` dentro do bloco `dependencies`.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Adicionar dependência do JUnit ao BuildConfig.groovy",
            "description": "Incluir a dependência `test 'junit:junit:4.12'` no bloco `dependencies` do arquivo `grails-app/conf/BuildConfig.groovy` para garantir a compatibilidade e disponibilidade do JUnit para testes.",
            "dependencies": [],
            "details": "Modificar `grails-app/conf/BuildConfig.groovy` para adicionar a linha `test 'junit:junit:4.12'` dentro do bloco `dependencies`.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Configurar H2 em memória para o ambiente de teste no DataSource.groovy",
            "description": "No arquivo `grails-app/conf/DataSource.groovy`, adicionar ou ajustar a configuração do `dataSource` para o ambiente `test` para usar um banco de dados H2 em memória, garantindo um ambiente de teste isolado e rápido.",
            "dependencies": [],
            "details": "Adicionar ou modificar o bloco `test { dataSource { dbCreate = 'update'; url = 'jdbc:h2:mem:testDb;MVCC=TRUE' } }` dentro do bloco `environments` em `grails-app/conf/DataSource.groovy`.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Ajustar configurações de logging para o ambiente de teste no Config.groovy",
            "description": "No arquivo `grails-app/conf/Config.groovy`, revisar e ajustar as configurações de logging (log4j) para o ambiente `test`, se necessário, para garantir que os logs relevantes sejam exibidos durante a execução dos testes sem poluir a saída.",
            "dependencies": [],
            "details": "Adicionar um bloco `test { log4j = { ... } }` ou modificar o bloco `environments { test { ... } }` para incluir configurações de logging específicas, como nível de log para `stdout` ou desabilitar logs desnecessários, em `grails-app/conf/Config.groovy`.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Criar um teste Spock básico para validação da configuração",
            "description": "Criar um arquivo de teste Spock simples, por exemplo, `SampleSpec.groovy`, no diretório `test/unit/todo/api/` para validar a correta configuração e funcionamento do Spock Framework.",
            "dependencies": [],
            "details": "O arquivo `test/unit/todo/api/SampleSpec.groovy` deve estender `spock.lang.Specification` e conter um método de teste básico como `def 'should add two numbers'() { expect: 1 + 1 == 2 }`.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Executar testes e validar a configuração completa do ambiente",
            "description": "Executar os testes de unidade via `grails test-app unit: *` e verificar se o teste Spock criado (`SampleSpec.groovy`) é executado com sucesso, confirmando que o Spock Framework e o ambiente de testes estão corretamente configurados e operacionais.",
            "dependencies": [],
            "details": "Executar o comando `grails test-app unit: *` no terminal do projeto. Observar a saída para garantir que o `SampleSpec` foi encontrado e passou, indicando que todas as configurações anteriores foram aplicadas com sucesso.",
            "status": "pending",
            "testStrategy": "Executar o comando `grails test-app unit: *` e verificar a saída do console para a mensagem de sucesso do `SampleSpec.groovy`."
          }
        ]
      },
      {
        "id": 2,
        "title": "Implementar Testes de Unidade para Enums (TaskStatus, TaskPriority)",
        "description": "Desenvolver testes de unidade para as classes enum `TaskStatus` e `TaskPriority`. Validar os valores internos, os `displayName` e o método `toString()` de cada enum.",
        "details": "Criar `TaskStatusSpec.groovy` e `TaskPrioritySpec.groovy` em `test/unit/todo/api/`. Para cada enum, testar todos os valores definidos, verificar se o `displayName` corresponde ao esperado e se o `toString()` retorna a representação correta.",
        "testStrategy": "Utilizar a estrutura Given-When-Then do Spock. Para cada enum, iterar sobre os valores e verificar as propriedades `displayName` e `toString()`.",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Implementar Testes de Unidade para a Classe de Domínio Task",
        "description": "Criar testes de unidade para a classe de domínio `Task.groovy`. Focar na validação das constraints (`title`, `description`), nos valores padrão (`status`, `priority`) e no método `toString()`.",
        "details": "Criar `TaskSpec.groovy` em `test/unit/todo/api/`. Utilizar `GrailsUnitTestMixin` para testar as constraints. Testar cenários de sucesso e falha para `title` (blank, maxSize) e `description` (maxSize). Verificar se `status` e `priority` são inicializados com os valores padrão corretos. Testar o método `toString()`.",
        "testStrategy": "Usar `GrailsUnitTestMixin` para testar as constraints. Para valores padrão e `toString()`, instanciar a classe `Task` e verificar as propriedades diretamente. Usar `validate()` para testar as constraints.",
        "priority": "high",
        "dependencies": [
          1,
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Implementar Testes de Unidade para TaskService - CRUD Básico",
        "description": "Desenvolver testes de unidade para os métodos CRUD básicos do `TaskService`: `listAllTasks()`, `getTaskById()`, `createTask()`, `updateTask()` e `deleteTask()`. Mockar as interações com a classe de domínio `Task`.",
        "details": "Criar `TaskServiceSpec.groovy` em `test/unit/todo/api/`. Mockar `Task.get()`, `Task.list()`, `task.save()`, `task.delete()`. Testar cenários de sucesso e falha, incluindo validação de entrada para `createTask()` e `updateTask()`, e tratamento de 'não encontrado' para `getTaskById()`, `updateTask()` e `deleteTask()`.",
        "testStrategy": "Utilizar `GrailsUnitTestMixin` e `Mock(Task)` para simular o comportamento do domínio. Usar `given:`, `when:`, `then:` para estruturar os testes, verificando o retorno dos métodos e as interações com os mocks.",
        "priority": "high",
        "dependencies": [
          1,
          3
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Configurar Teste e Implementar `listAllTasks()`",
            "description": "Criar o arquivo `TaskServiceSpec.groovy` em `test/unit/todo/api/`. Configurar o ambiente de teste com `GrailsUnitTestMixin` e injetar o `TaskService`. Mockar a classe de domínio `Task` e implementar testes de unidade para o método `listAllTasks()`, cobrindo cenários onde não há tarefas e onde há múltiplas tarefas.",
            "dependencies": [],
            "details": "Criar `TaskServiceSpec.groovy`. No `setup()`, configurar `TaskService` e `Mock(Task)`. Testar `listAllTasks()`: 1) `Task.list()` retorna lista vazia. 2) `Task.list()` retorna uma lista de objetos `Task` mockados.",
            "status": "pending",
            "testStrategy": "Utilizar `GrailsUnitTestMixin` e `Mock(Task)` para simular o comportamento do domínio. Usar `given:`, `when:`, `then:` para estruturar os testes, verificando o retorno dos métodos e as interações com os mocks (`Task.list()`)."
          },
          {
            "id": 2,
            "title": "Implementar Testes para `getTaskById()`",
            "description": "Desenvolver testes de unidade para o método `getTaskById()` do `TaskService`. Mockar as interações com `Task.get(id)` para simular cenários de sucesso (tarefa encontrada) e falha (tarefa não encontrada).",
            "dependencies": [
              "4.1"
            ],
            "details": "No `TaskServiceSpec.groovy`, adicionar testes para `getTaskById()`: 1) `Task.get(id)` retorna um objeto `Task` mockado. 2) `Task.get(id)` retorna `null` (tarefa não encontrada).",
            "status": "pending",
            "testStrategy": "Utilizar `Mock(Task)` para controlar o retorno de `Task.get(id)`. Verificar se o método `getTaskById()` retorna o objeto `Task` esperado ou `null` conforme o cenário."
          },
          {
            "id": 3,
            "title": "Implementar Testes para `createTask()`",
            "description": "Desenvolver testes de unidade para o método `createTask()` do `TaskService`. Mockar `task.save()` e `task.validate()` para cobrir cenários de criação bem-sucedida e falha de validação de entrada.",
            "dependencies": [
              "4.1"
            ],
            "details": "No `TaskServiceSpec.groovy`, adicionar testes para `createTask()`: 1) Criação bem-sucedida: `new Task(properties).save()` é chamado e retorna a tarefa criada. 2) Falha de validação: `new Task(properties).save()` retorna `null` e `task.hasErrors()` é `true` (simular validação falha).",
            "status": "pending",
            "testStrategy": "Utilizar `Mock(Task)` para simular a criação de uma nova instância e o comportamento de `save()` e `hasErrors()`. Verificar o retorno do método `createTask()` e se `save()` foi invocado corretamente."
          },
          {
            "id": 4,
            "title": "Implementar Testes para `updateTask()`",
            "description": "Desenvolver testes de unidade para o método `updateTask()` do `TaskService`. Mockar `Task.get(id)`, `task.save()` e `task.validate()` para testar cenários de atualização bem-sucedida, tarefa não encontrada e falha de validação.",
            "dependencies": [
              "4.1"
            ],
            "details": "No `TaskServiceSpec.groovy`, adicionar testes para `updateTask()`: 1) Atualização bem-sucedida: `Task.get(id)` retorna tarefa, propriedades são atualizadas, `task.save()` é chamado e retorna a tarefa atualizada. 2) Tarefa não encontrada: `Task.get(id)` retorna `null`. 3) Falha de validação: `Task.get(id)` retorna tarefa, propriedades são atualizadas, `task.save()` retorna `null` e `task.hasErrors()` é `true`.",
            "status": "pending",
            "testStrategy": "Utilizar `Mock(Task)` para controlar o retorno de `Task.get(id)` e simular o comportamento de `save()` e `hasErrors()` em uma instância de `Task`. Verificar o retorno do método `updateTask()` e as interações com os mocks."
          },
          {
            "id": 5,
            "title": "Implementar Testes para `deleteTask()`",
            "description": "Desenvolver testes de unidade para o método `deleteTask()` do `TaskService`. Mockar `Task.get(id)` e `task.delete()` para cobrir cenários de exclusão bem-sucedida e tarefa não encontrada.",
            "dependencies": [
              "4.1"
            ],
            "details": "No `TaskServiceSpec.groovy`, adicionar testes para `deleteTask()`: 1) Exclusão bem-sucedida: `Task.get(id)` retorna tarefa, `task.delete()` é chamado. 2) Tarefa não encontrada: `Task.get(id)` retorna `null` e `task.delete()` não é chamado.",
            "status": "pending",
            "testStrategy": "Utilizar `Mock(Task)` para controlar o retorno de `Task.get(id)` e verificar se `task.delete()` é invocado quando a tarefa é encontrada e não invocado quando a tarefa não é encontrada. Verificar o retorno booleano do método `deleteTask()`."
          }
        ]
      },
      {
        "id": 5,
        "title": "Implementar Testes de Unidade para TaskService - Operações de Status e Lote",
        "description": "Criar testes de unidade para os métodos `updateTaskStatus(Long id, TaskStatus status)` e `updateTasksStatusBatch(List<Long> taskIds, TaskStatus newStatus)` no `TaskService`. Mockar as interações com o domínio e garantir o tratamento de erros.",
        "details": "Continuar em `TaskServiceSpec.groovy`. Mockar `Task.get()` e `task.save()` para simular a atualização de status. Testar `updateTaskStatus()` para um único ID, incluindo casos de sucesso, ID não encontrado e status inválido. Testar `updateTasksStatusBatch()` com múltiplos IDs, verificando a atualização correta e o tratamento de IDs inexistentes.",
        "testStrategy": "Usar `Mock(Task)` para simular o comportamento do domínio. Testar com diferentes combinações de IDs e status, verificando se as chamadas aos métodos do domínio ocorrem conforme o esperado e se as exceções são lançadas corretamente.",
        "priority": "high",
        "dependencies": [
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Implementar Testes de Unidade para TaskController (Interface Web)",
        "description": "Desenvolver testes de unidade para as ações do `TaskController` (web), incluindo `index()`, `show()`, `create()`, `save()`, `edit()`, `update()`, `delete()` e `batchUpdateStatus()`. Mockar o `TaskService` e verificar `flash messages`, redirecionamentos e atributos do modelo.",
        "details": "Criar `TaskControllerSpec.groovy` em `test/unit/todo/api/`. Utilizar `GrailsControllerUnitTestMixin` e `Mock(TaskService)`. Para cada ação, testar o fluxo de sucesso, validação de entrada, tratamento de 'não encontrado', e verificar se os `flash messages`, `redirects` e `model` estão corretos. Testar a conversão de `priority` e `status`.",
        "testStrategy": "Usar `GrailsControllerUnitTestMixin` e `Mock(TaskService)`. Simular requisições HTTP e verificar o estado do controlador após a execução da ação, incluindo `response.redirectedUrl`, `flash.message` e `model`.",
        "priority": "medium",
        "dependencies": [
          1,
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Implementar Testes de Unidade para TaskRestController (API REST)",
        "description": "Criar testes de unidade para os endpoints da `TaskRestController`, cobrindo `index()`, `show()`, `save()`, `update()`, `delete()` e `updateStatus()`. Mockar o `TaskService` e validar os códigos de status HTTP e as respostas JSON.",
        "details": "Criar `TaskRestControllerSpec.groovy` em `test/unit/todo/api/`. Utilizar `GrailsControllerUnitTestMixin` e `Mock(TaskService)`. Para cada endpoint, testar cenários de sucesso (200, 201, 204) e falha (400, 404), verificando o `response.status` e o conteúdo JSON retornado.",
        "testStrategy": "Usar `GrailsControllerUnitTestMixin` e `Mock(TaskService)`. Simular requisições HTTP com diferentes métodos (GET, POST, PUT, DELETE, PATCH) e payloads JSON. Validar `response.status` e parsear `response.json` para verificar o conteúdo.",
        "priority": "medium",
        "dependencies": [
          1,
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Desenvolver Factories e Helpers para Dados de Teste",
        "description": "Criar factories reutilizáveis (ex: `TaskFactory`) para gerar instâncias de `Task` com dados consistentes e variados para os testes. Desenvolver métodos auxiliares para configurações comuns de teste ou asserções repetitivas.",
        "details": "Criar um diretório `test/unit/util/` ou similar. Implementar `TaskFactory.groovy` que permita criar instâncias de `Task` com valores padrão ou personalizados. Criar helpers para, por exemplo, configurar mocks de domínio ou serviço de forma mais concisa.",
        "testStrategy": "Integrar as factories e helpers nos testes existentes (Tasks 3, 4, 5, 6, 7) para reduzir a duplicação de código e melhorar a legibilidade. Garantir que as factories possam gerar dados válidos e inválidos conforme necessário.",
        "priority": "low",
        "dependencies": [
          3,
          4,
          5,
          6,
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Configurar Cobertura de Código e Relatórios",
        "description": "Integrar uma ferramenta de cobertura de código (ex: Cobertura ou JaCoCo, compatível com Grails 2.5.6) ao processo de build. Configurar a geração de relatórios de cobertura e definir um limite mínimo de cobertura (ex: 80%).",
        "details": "Adicionar o plugin de cobertura de código ao `BuildConfig.groovy`. Configurar as tarefas de build para gerar relatórios HTML e XML após a execução dos testes. Definir um `failOn` para o limite de cobertura. Verificar a compatibilidade com o Grails 2.5.6.",
        "testStrategy": "Executar `grails test-app -coverage` e verificar se os relatórios são gerados corretamente no diretório `target/test-reports/`. Analisar o relatório para identificar áreas com baixa cobertura e ajustar os testes conforme necessário.",
        "priority": "low",
        "dependencies": [
          1,
          2,
          3,
          4,
          5,
          6,
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Revisar, Refatorar e Documentar Testes",
        "description": "Realizar uma revisão completa de todos os testes implementados, garantindo que sigam as melhores práticas do Spock (Given-When-Then, nomes descritivos). Refatorar código duplicado, otimizar a performance dos testes e documentar as convenções de teste e instruções de execução.",
        "details": "Percorrer todos os arquivos `*Spec.groovy`. Garantir que os nomes dos métodos de teste sejam descritivos e em português. Otimizar o uso de `setup()` e `cleanup()`. Criar um `README.md` ou seção na documentação do projeto explicando como executar os testes, as convenções adotadas e como interpretar os relatórios de cobertura.",
        "testStrategy": "Executar a suíte completa de testes para verificar a performance. Revisar o código dos testes para clareza e manutenibilidade. Validar a documentação criada.",
        "priority": "low",
        "dependencies": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-09-24T21:36:03.445Z",
      "updated": "2025-09-25T11:35:53.993Z",
      "description": "Tasks for master context"
    }
  }
}